// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/moevm/nosql1h25-writer/backend/internal/repo/orders (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_contract.go -package=mocks . Repo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/moevm/nosql1h25-writer/backend/internal/entity"
	orders "github.com/moevm/nosql1h25-writer/backend/internal/repo/orders"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepo) Create(ctx context.Context, in orders.CreateIn) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo)(nil).Create), ctx, in)
}

// CreateResponse mocks base method.
func (m *MockRepo) CreateResponse(ctx context.Context, orderID, userID primitive.ObjectID, coverLetter, freelancerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponse", ctx, orderID, userID, coverLetter, freelancerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResponse indicates an expected call of CreateResponse.
func (mr *MockRepoMockRecorder) CreateResponse(ctx, orderID, userID, coverLetter, freelancerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponse", reflect.TypeOf((*MockRepo)(nil).CreateResponse), ctx, orderID, userID, coverLetter, freelancerName)
}

// Find mocks base method.
func (m *MockRepo) Find(ctx context.Context, in orders.FindIn) (orders.FindOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, in)
	ret0, _ := ret[0].(orders.FindOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockRepoMockRecorder) Find(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepo)(nil).Find), ctx, in)
}

// FindByResponseUserID mocks base method.
func (m *MockRepo) FindByResponseUserID(ctx context.Context, freelancerID primitive.ObjectID) ([]entity.OrderExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByResponseUserID", ctx, freelancerID)
	ret0, _ := ret[0].([]entity.OrderExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByResponseUserID indicates an expected call of FindByResponseUserID.
func (mr *MockRepoMockRecorder) FindByResponseUserID(ctx, freelancerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByResponseUserID", reflect.TypeOf((*MockRepo)(nil).FindByResponseUserID), ctx, freelancerID)
}

// FindByUserIDExt mocks base method.
func (m *MockRepo) FindByUserIDExt(ctx context.Context, userID primitive.ObjectID) ([]entity.OrderExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDExt", ctx, userID)
	ret0, _ := ret[0].([]entity.OrderExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDExt indicates an expected call of FindByUserIDExt.
func (mr *MockRepoMockRecorder) FindByUserIDExt(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDExt", reflect.TypeOf((*MockRepo)(nil).FindByUserIDExt), ctx, userID)
}

// GetByID mocks base method.
func (m *MockRepo) GetByID(ctx context.Context, id primitive.ObjectID) (orders.OrderWithClientData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(orders.OrderWithClientData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepo)(nil).GetByID), ctx, id)
}

// GetByIDExt mocks base method.
func (m *MockRepo) GetByIDExt(ctx context.Context, id primitive.ObjectID) (entity.OrderExt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDExt", ctx, id)
	ret0, _ := ret[0].(entity.OrderExt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDExt indicates an expected call of GetByIDExt.
func (mr *MockRepoMockRecorder) GetByIDExt(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDExt", reflect.TypeOf((*MockRepo)(nil).GetByIDExt), ctx, id)
}

// Update mocks base method.
func (m *MockRepo) Update(ctx context.Context, in orders.UpdateIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepoMockRecorder) Update(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepo)(nil).Update), ctx, in)
}
