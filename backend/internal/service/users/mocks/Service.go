// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/moevm/nosql1h25-writer/backend/internal/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	users "github.com/moevm/nosql1h25-writer/backend/internal/service/users"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// FindOrdersByUserID provides a mock function with given fields: ctx, requesterID, targetUserID
func (_m *Service) FindOrdersByUserID(ctx context.Context, requesterID primitive.ObjectID, targetUserID primitive.ObjectID) ([]entity.OrderExt, error) {
	ret := _m.Called(ctx, requesterID, targetUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindOrdersByUserID")
	}

	var r0 []entity.OrderExt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) ([]entity.OrderExt, error)); ok {
		return rf(ctx, requesterID, targetUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) []entity.OrderExt); ok {
		r0 = rf(ctx, requesterID, targetUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OrderExt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, requesterID, targetUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByIDExt provides a mock function with given fields: ctx, userID
func (_m *Service) GetByIDExt(ctx context.Context, userID primitive.ObjectID) (entity.UserExt, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDExt")
	}

	var r0 entity.UserExt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (entity.UserExt, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) entity.UserExt); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.UserExt)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *Service) Update(ctx context.Context, in users.UpdateIn) error {
	ret := _m.Called(ctx, in)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, users.UpdateIn) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalance provides a mock function with given fields: ctx, userID, op, amount
func (_m *Service) UpdateBalance(ctx context.Context, userID primitive.ObjectID, op users.OperationType, amount int) (int, error) {
	ret := _m.Called(ctx, userID, op, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, users.OperationType, int) (int, error)); ok {
		return rf(ctx, userID, op, amount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, users.OperationType, int) int); ok {
		r0 = rf(ctx, userID, op, amount)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, users.OperationType, int) error); ok {
		r1 = rf(ctx, userID, op, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
