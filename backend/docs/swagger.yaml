basePath: /api
definitions:
  echo.HTTPError:
    properties:
      message: {}
    type: object
  github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType:
    enum:
    - beginning
    - negotiation
    - budgeting
    - work
    - reviews
    - finished
    - dispute
    type: string
    x-enum-varnames:
    - StatusTypeBeginning
    - StatusTypeNegotiation
    - StatusTypeBudgeting
    - StatusTypeWork
    - StatusTypeReviews
    - StatusTypeFinished
    - StatusTypeDispute
  github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - SystemRoleTypeAdmin
    - SystemRoleTypeUser
  internal_api_get_admin.Response:
    properties:
      systemRole:
        allOf:
        - $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType'
        example: admin
      userId:
        example: 5a2493c33c95a1281836eb6a
        type: string
    required:
    - systemRole
    - userId
    type: object
  internal_api_get_orders.Order:
    properties:
      clientName:
        type: string
      completionTime:
        type: integer
      cost:
        type: integer
      description:
        type: string
      id:
        type: string
      rating:
        type: number
      title:
        type: string
    type: object
  internal_api_get_orders.Response:
    properties:
      orders:
        items:
          $ref: '#/definitions/internal_api_get_orders.Order'
        type: array
      total:
        example: 250
        type: integer
    type: object
  internal_api_get_orders_id.Order:
    properties:
      clientEmail:
        example: goida@mail.ru
        type: string
      clientId:
        example: 582ebf010936ac3ba5cd00e4
        type: string
      clientName:
        example: John Doe
        type: string
      clientRating:
        example: 4.8
        type: number
      completionTime:
        example: 3600000000000
        type: integer
      cost:
        example: 500
        type: integer
      createdAt:
        example: "2020-01-01T00:00:00Z"
        type: string
      description:
        example: Write something for me but more words
        type: string
      freelancerEmail:
        example: test@mail.com
        type: string
      freelancerId:
        example: 582ebf010936ac3ba5cd00e4
        type: string
      id:
        example: 582ebf010936ac3ba5cd00e4
        type: string
      responses:
        items:
          $ref: '#/definitions/internal_api_get_orders_id.OrderResponse'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType'
        example: beginning
      statuses:
        items:
          $ref: '#/definitions/internal_api_get_orders_id.Status'
        type: array
      title:
        example: Write something for me
        type: string
      updatedAt:
        example: "2020-01-01T00:00:00Z"
        type: string
    required:
    - clientEmail
    - clientId
    - clientName
    - clientRating
    - completionTime
    - createdAt
    - description
    - id
    - status
    - statuses
    - title
    - updatedAt
    type: object
  internal_api_get_orders_id.OrderResponse:
    properties:
      coverLetter:
        example: Can help with your order
        type: string
      createdAt:
        example: "2020-01-01T00:00:00Z"
        type: string
      freelancerId:
        example: 582ebf010936ac3ba5cd00e4
        type: string
      freelancerName:
        example: David Bowling
        type: string
    required:
    - coverLetter
    - createdAt
    - freelancerId
    - freelancerName
    type: object
  internal_api_get_orders_id.Response:
    properties:
      hasActiveResponse:
        type: boolean
      isClient:
        type: boolean
      isFreelancer:
        type: boolean
      order:
        $ref: '#/definitions/internal_api_get_orders_id.Order'
    required:
    - hasActiveResponse
    - isClient
    - isFreelancer
    - order
    type: object
  internal_api_get_orders_id.Status:
    properties:
      createdAt:
        example: "2020-01-01T00:00:00Z"
        type: string
      type:
        allOf:
        - $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType'
        example: beginning
    required:
    - createdAt
    - type
    type: object
  internal_api_get_users_id.Profile:
    properties:
      description:
        type: string
      rating:
        type: number
      updatedAt:
        type: string
    type: object
  internal_api_get_users_id.Response:
    properties:
      balance:
        type: integer
      client:
        $ref: '#/definitions/internal_api_get_users_id.Profile'
      createdAt:
        type: string
      displayName:
        type: string
      email:
        type: string
      freelancer:
        $ref: '#/definitions/internal_api_get_users_id.Profile'
      id:
        type: string
      systemRole:
        $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType'
      updatedAt:
        type: string
    type: object
  internal_api_get_users_id_orders.Order:
    properties:
      clientId:
        type: string
      completionTime:
        type: integer
      cost:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      freelancerId:
        type: string
      id:
        type: string
      status:
        $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType'
      title:
        type: string
      totalResponses:
        type: integer
      updatedAt:
        type: string
    type: object
  internal_api_get_users_id_orders.Response:
    properties:
      orders:
        items:
          $ref: '#/definitions/internal_api_get_users_id_orders.Order'
        type: array
    type: object
  internal_api_get_users_id_responses.Response:
    properties:
      responses:
        items:
          $ref: '#/definitions/internal_api_get_users_id_responses.ResponseOrder'
        type: array
    type: object
  internal_api_get_users_id_responses.ResponseOrder:
    properties:
      completionTime:
        type: integer
      cost:
        type: integer
      coverLetter:
        type: string
      id:
        type: string
      responseTime:
        type: string
      status:
        $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType'
      title:
        type: string
    type: object
  internal_api_patch_orders_id.Request:
    properties:
      completionTime:
        example: 3600000000000
        minimum: 3600000000000
        type: integer
      cost:
        example: 5000
        minimum: 0
        type: integer
      description:
        example: New Order Description
        maxLength: 2048
        minLength: 16
        type: string
      freelancerId:
        type: string
      id:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType'
        enum:
        - beginning
        - negotiation
        - budgeting
        - work
        - reviews
        - finished
        - dispute
        example: finished
      title:
        example: New title
        maxLength: 256
        minLength: 4
        type: string
    required:
    - id
    type: object
  internal_api_patch_users_id.Request:
    properties:
      clientDescription:
        example: Client Description
        maxLength: 2048
        minLength: 16
        type: string
      displayName:
        example: username
        maxLength: 64
        minLength: 3
        type: string
      freelancerDescription:
        example: Freelancer Description
        maxLength: 2048
        minLength: 16
        type: string
      id:
        type: string
    required:
    - id
    type: object
  internal_api_post_auth_login.Request:
    properties:
      email:
        example: test@gmail.com
        format: email
        type: string
      password:
        example: Password123
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  internal_api_post_auth_login.Response:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: 289abe45-5920-4366-a12a-875ddb422ace
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  internal_api_post_auth_logout.Request:
    properties:
      refreshToken:
        example: 0e8f711e-b713-4869-b528-059a74311482
        type: string
    type: object
  internal_api_post_auth_refresh.Request:
    properties:
      refreshToken:
        example: 0e8f711e-b713-4869-b528-059a74311482
        type: string
    type: object
  internal_api_post_auth_refresh.Response:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refreshToken:
        example: 289abe45-5920-4366-a12a-875ddb422ace
        type: string
    required:
    - accessToken
    - refreshToken
    type: object
  internal_api_post_auth_register.Request:
    properties:
      displayName:
        example: username
        maxLength: 64
        minLength: 3
        type: string
      email:
        example: test@gmail.com
        format: email
        type: string
      password:
        example: Password123
        maxLength: 72
        minLength: 8
        type: string
    required:
    - displayName
    - email
    - password
    type: object
  internal_api_post_auth_register.Response:
    properties:
      accessToken:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      id:
        example: 582ebf010936ac3ba5cd00e4
        type: string
      refreshToken:
        example: 289abe45-5920-4366-a12a-875ddb422ace
        type: string
    required:
    - accessToken
    - id
    - refreshToken
    type: object
  internal_api_post_balance_deposit.Request:
    properties:
      amount:
        example: 100
        minimum: 1
        type: integer
    required:
    - amount
    type: object
  internal_api_post_balance_deposit.Response:
    properties:
      newBalance:
        example: 777
        type: integer
    type: object
  internal_api_post_balance_withdraw.Request:
    properties:
      amount:
        example: 100
        minimum: 1
        type: integer
    required:
    - amount
    type: object
  internal_api_post_balance_withdraw.Response:
    properties:
      newBalance:
        example: 111
        type: integer
    type: object
  internal_api_post_order_response.Request:
    properties:
      coverLetter:
        example: Я заинтересован в вашем проекте и имею релевантный опыт в этой области.
          Готов обсудить детали и начать работу.
        maxLength: 512
        minLength: 16
        type: string
      orderID:
        example: 683b2dc10949bd1e64266ed0
        type: string
    required:
    - coverLetter
    - orderID
    type: object
  internal_api_post_orders.Request:
    properties:
      completionTime:
        example: 3600000000000
        minimum: 3600000000000
        type: integer
      cost:
        example: 500
        minimum: 0
        type: integer
      description:
        example: Написать сценарий вот такой и такой
        maxLength: 8192
        minLength: 16
        type: string
      title:
        example: Сценарий
        maxLength: 32
        minLength: 3
        type: string
    required:
    - completionTime
    - description
    - title
    type: object
  internal_api_post_orders.Response:
    properties:
      id:
        example: 522bb79455449d881b004d27
        type: string
    required:
    - id
    type: object
host: localhost:80
info:
  contact: {}
  description: API for freelancer's site
  title: Writer
  version: 1.0.0
paths:
  /admin:
    get:
      description: Whether user has admin rights
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_get_admin.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Check admin rights available
      tags:
      - admin
  /admin/export:
    get:
      description: Export mongodb state and return file
      produces:
      - application/gzip
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Export mongodb state and return file
      tags:
      - admin
  /admin/import:
    post:
      consumes:
      - application/gzip
      description: Import mongodb state into current instance
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Import mongodb state into current instance
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Generate `access` and `refresh` token pair. `refreshToken` sets
        in httpOnly cookie also.
      parameters:
      - description: existing user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_auth_login.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_post_auth_login.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login by email and password
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Remove `refreshSession` attached to `refreshToken`. `refreshToken`
        can be passed in cookie
      parameters:
      - description: active refresh token in UUID RFC4122 format
        in: body
        name: refreshToken
        schema:
          $ref: '#/definitions/internal_api_post_auth_logout.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh `access` and `refresh` token pair. `refreshToken` can be
        passed in cookie
      parameters:
      - description: active refresh token in UUID RFC4122 format
        in: body
        name: refreshToken
        schema:
          $ref: '#/definitions/internal_api_post_auth_refresh.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_post_auth_refresh.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Refresh tokens
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create new user and return ID with `refresh` and `access` tokens
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_auth_register.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_api_post_auth_register.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Register user
      tags:
      - auth
  /balance/deposit:
    post:
      consumes:
      - application/json
      description: Add specified amount to authenticated user's balance
      parameters:
      - description: Deposit amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_balance_deposit.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_post_balance_deposit.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Deposit funds
      tags:
      - balance
  /balance/withdraw:
    post:
      consumes:
      - application/json
      description: Subtract specified amount from authenticated user's balance
      parameters:
      - description: Withdrawal amount
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_balance_withdraw.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_post_balance_withdraw.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Withdraw funds
      tags:
      - balance
  /health:
    get:
      description: Whether REST-API alive or not
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Check health
      tags:
      - health
  /orders:
    get:
      consumes:
      - application/json
      description: Get a paginated list of orders and total count
      parameters:
      - default: 0
        description: Offset
        example: 0
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 10
        description: Limit
        example: 10
        in: query
        maximum: 200
        minimum: 1
        name: limit
        type: integer
      - description: 'Sort field: cost_asc, cost_desc, newest, oldest'
        enum:
        - cost_asc
        - cost_desc
        - newest
        - oldest
        in: query
        name: sortBy
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_get_orders.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Get orders list
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create order on behalf of authenticated user
      parameters:
      - description: order parameters
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_orders.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_post_orders.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Create order
      tags:
      - orders
  /orders/{id}:
    get:
      description: Return order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_get_orders_id.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Get info about order and several related things
      tags:
      - orders
    patch:
      consumes:
      - application/json
      description: Only updates fields present in the request. Admin can update any
        order. User can update only their own open orders.
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_patch_orders_id.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Update order
      tags:
      - orders
  /orders/{id}/response:
    post:
      consumes:
      - application/json
      description: Create response to existing order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Response data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_post_order_response.Request'
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Response to order
      tags:
      - orders
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves user details by their ObjectID. Requires authentication.
        Access allowed to the user themselves or administrators. Optionally filters
        profiles.
      parameters:
      - description: User ObjectID (Hex)
        example: 507f1f77bcf86cd799439011
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: multi
        description: Profile types to include ('client', 'freelancer').
        in: query
        items:
          enum:
          - client
          - freelancer
          type: string
        name: profile
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user details
          schema:
            $ref: '#/definitions/internal_api_get_users_id.Response'
        "400":
          description: Invalid request format or ObjectID
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized (invalid or missing JWT)
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden (access denied)
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Get user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Partially update user fields. Admin can update any user; regular
        user can update only their own profile.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/internal_api_patch_users_id.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Update user
      tags:
      - Users
  /users/{id}/orders:
    get:
      description: Получить список заказов пользователя
      parameters:
      - description: ID пользователя
        example: '"507f1f77bcf86cd799439011"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_get_users_id_orders.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Получить список заказов пользователя
      tags:
      - Users
  /users/{id}/responses:
    get:
      description: Получить список заказов, на которые откликался пользователь
      parameters:
      - description: ID пользователя
        example: '"507f1f77bcf86cd799439011"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_api_get_users_id_responses.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - JWT: []
      summary: Получить список заказов, на которые откликался пользователь
      tags:
      - Users
securityDefinitions:
  JWT:
    description: JSON Web Token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
