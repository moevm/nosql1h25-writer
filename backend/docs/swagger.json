{
    "swagger": "2.0",
    "info": {
        "description": "API for freelancer's site",
        "title": "Writer",
        "contact": {},
        "version": "1.0.0"
    },
    "host": "localhost:80",
    "basePath": "/api",
    "paths": {
        "/admin": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Whether user has admin rights",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Check admin rights available",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_get_admin.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Generate `access` and `refresh` token pair. `refreshToken` sets in httpOnly cookie also.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login by email and password",
                "parameters": [
                    {
                        "description": "existing user credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_login.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_login.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Remove `refreshSession` attached to `refreshToken`. `refreshToken` can be passed in cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "active refresh token in UUID RFC4122 format",
                        "name": "refreshToken",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_logout.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh `access` and `refresh` token pair. `refreshToken` can be passed in cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh tokens",
                "parameters": [
                    {
                        "description": "active refresh token in UUID RFC4122 format",
                        "name": "refreshToken",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_refresh.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_refresh.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create new user and return ID with `refresh` and `access` tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "user credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_register.Request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_auth_register.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/balance/deposit": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Add specified amount to authenticated user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Deposit funds",
                "parameters": [
                    {
                        "description": "Deposit amount",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_balance_deposit.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_balance_deposit.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/balance/withdraw": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Subtract specified amount from authenticated user's balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "balance"
                ],
                "summary": "Withdraw funds",
                "parameters": [
                    {
                        "description": "Withdrawal amount",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_balance_withdraw.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_balance_withdraw.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Whether REST-API alive or not",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Check health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a paginated list of orders and total count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get orders list",
                "parameters": [
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "example": 0,
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "maximum": 200,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 10,
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "cost_asc",
                            "cost_desc",
                            "newest",
                            "oldest"
                        ],
                        "type": "string",
                        "description": "Sort field: cost_asc, cost_desc, newest, oldest",
                        "name": "sortBy",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_get_orders.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Create order on behalf of authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create order",
                "parameters": [
                    {
                        "description": "order parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_orders.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_post_orders.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Return order by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get info about order and several related things",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_api_get_orders_id.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Only updates fields present in the request. Admin can update any order. User can update only their own open orders.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_patch_orders_id.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Retrieves user details by their ObjectID. Requires authentication. Access allowed to the user themselves or administrators. Optionally filters profiles.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "507f1f77bcf86cd799439011",
                        "description": "User ObjectID (Hex)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                "client",
                                "freelancer"
                            ],
                            "type": "string"
                        },
                        "collectionFormat": "multi",
                        "description": "Profile types to include ('client', 'freelancer').",
                        "name": "profile",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user details",
                        "schema": {
                            "$ref": "#/definitions/internal_api_get_users_id.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or ObjectID",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid or missing JWT)",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden (access denied)",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Partially update user fields. Admin can update any user; regular user can update only their own profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_api_patch_users_id.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType": {
            "type": "string",
            "enum": [
                "beginning",
                "negotiation",
                "budgeting",
                "work",
                "reviews",
                "finished",
                "dispute"
            ],
            "x-enum-varnames": [
                "StatusTypeBeginning",
                "StatusTypeNegotiation",
                "StatusTypeBudgeting",
                "StatusTypeWork",
                "StatusTypeReviews",
                "StatusTypeFinished",
                "StatusTypeDispute"
            ]
        },
        "github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType": {
            "type": "string",
            "enum": [
                "admin",
                "user"
            ],
            "x-enum-varnames": [
                "SystemRoleTypeAdmin",
                "SystemRoleTypeUser"
            ]
        },
        "internal_api_get_admin.Response": {
            "type": "object",
            "required": [
                "systemRole",
                "userId"
            ],
            "properties": {
                "systemRole": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType"
                        }
                    ],
                    "example": "admin"
                },
                "userId": {
                    "type": "string",
                    "example": "5a2493c33c95a1281836eb6a"
                }
            }
        },
        "internal_api_get_orders.Order": {
            "type": "object",
            "properties": {
                "clientName": {
                    "type": "string"
                },
                "completionTime": {
                    "type": "integer"
                },
                "cost": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "internal_api_get_orders.Response": {
            "type": "object",
            "properties": {
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_api_get_orders.Order"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 250
                }
            }
        },
        "internal_api_get_orders_id.Order": {
            "type": "object",
            "required": [
                "clientId",
                "clientName",
                "clientRating",
                "completionTime",
                "createdAt",
                "description",
                "id",
                "status",
                "title",
                "updatedAt"
            ],
            "properties": {
                "clientId": {
                    "type": "string",
                    "example": "582ebf010936ac3ba5cd00e4"
                },
                "clientName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "clientRating": {
                    "type": "number",
                    "example": 4.8
                },
                "completionTime": {
                    "type": "integer",
                    "example": 3600000000000
                },
                "cost": {
                    "type": "integer",
                    "example": 500
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Write something for me but more words"
                },
                "freelancerId": {
                    "type": "string",
                    "example": "582ebf010936ac3ba5cd00e4"
                },
                "id": {
                    "type": "string",
                    "example": "582ebf010936ac3ba5cd00e4"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.StatusType"
                        }
                    ],
                    "example": "beginning"
                },
                "title": {
                    "type": "string",
                    "example": "Write something for me"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-01-01T00:00:00Z"
                }
            }
        },
        "internal_api_get_orders_id.Response": {
            "type": "object",
            "required": [
                "hasActiveResponse",
                "isClient",
                "isFreelancer",
                "order"
            ],
            "properties": {
                "hasActiveResponse": {
                    "type": "boolean"
                },
                "isClient": {
                    "type": "boolean"
                },
                "isFreelancer": {
                    "type": "boolean"
                },
                "order": {
                    "$ref": "#/definitions/internal_api_get_orders_id.Order"
                }
            }
        },
        "internal_api_get_users_id.Profile": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "internal_api_get_users_id.Response": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "integer"
                },
                "client": {
                    "$ref": "#/definitions/internal_api_get_users_id.Profile"
                },
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "freelancer": {
                    "$ref": "#/definitions/internal_api_get_users_id.Profile"
                },
                "id": {
                    "type": "string"
                },
                "systemRole": {
                    "$ref": "#/definitions/github_com_moevm_nosql1h25-writer_backend_internal_entity.SystemRoleType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "internal_api_patch_orders_id.Request": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "completionTime": {
                    "type": "integer",
                    "minimum": 3600000000000,
                    "example": 3600000000000
                },
                "cost": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 5000
                },
                "description": {
                    "type": "string",
                    "maxLength": 2048,
                    "minLength": 16,
                    "example": "New Order Description"
                },
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 4,
                    "example": "New title"
                }
            }
        },
        "internal_api_patch_users_id.Request": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "clientDescription": {
                    "type": "string",
                    "maxLength": 2048,
                    "minLength": 16,
                    "example": "Client Description"
                },
                "displayName": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 3,
                    "example": "username"
                },
                "freelancerDescription": {
                    "type": "string",
                    "maxLength": 2048,
                    "minLength": 16,
                    "example": "Freelancer Description"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "internal_api_post_auth_login.Request": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "test@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "Password123"
                }
            }
        },
        "internal_api_post_auth_login.Response": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "289abe45-5920-4366-a12a-875ddb422ace"
                }
            }
        },
        "internal_api_post_auth_logout.Request": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "example": "0e8f711e-b713-4869-b528-059a74311482"
                }
            }
        },
        "internal_api_post_auth_refresh.Request": {
            "type": "object",
            "properties": {
                "refreshToken": {
                    "type": "string",
                    "example": "0e8f711e-b713-4869-b528-059a74311482"
                }
            }
        },
        "internal_api_post_auth_refresh.Response": {
            "type": "object",
            "required": [
                "accessToken",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "289abe45-5920-4366-a12a-875ddb422ace"
                }
            }
        },
        "internal_api_post_auth_register.Request": {
            "type": "object",
            "required": [
                "displayName",
                "email",
                "password"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 64,
                    "minLength": 3,
                    "example": "username"
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "example": "test@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 8,
                    "example": "Password123"
                }
            }
        },
        "internal_api_post_auth_register.Response": {
            "type": "object",
            "required": [
                "accessToken",
                "id",
                "refreshToken"
            ],
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                },
                "id": {
                    "type": "string",
                    "example": "582ebf010936ac3ba5cd00e4"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "289abe45-5920-4366-a12a-875ddb422ace"
                }
            }
        },
        "internal_api_post_balance_deposit.Request": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "internal_api_post_balance_deposit.Response": {
            "type": "object",
            "properties": {
                "newBalance": {
                    "type": "integer",
                    "example": 777
                }
            }
        },
        "internal_api_post_balance_withdraw.Request": {
            "type": "object",
            "required": [
                "amount"
            ],
            "properties": {
                "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "example": 100
                }
            }
        },
        "internal_api_post_balance_withdraw.Response": {
            "type": "object",
            "properties": {
                "newBalance": {
                    "type": "integer",
                    "example": 111
                }
            }
        },
        "internal_api_post_orders.Request": {
            "type": "object",
            "required": [
                "completionTime",
                "description",
                "title"
            ],
            "properties": {
                "completionTime": {
                    "type": "integer",
                    "minimum": 3600000000000,
                    "example": 3600000000000
                },
                "cost": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 500
                },
                "description": {
                    "type": "string",
                    "maxLength": 8192,
                    "minLength": 16,
                    "example": "Написать сценарий вот такой и такой"
                },
                "title": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 3,
                    "example": "Сценарий"
                }
            }
        },
        "internal_api_post_orders.Response": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "example": "522bb79455449d881b004d27"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "description": "JSON Web Token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}